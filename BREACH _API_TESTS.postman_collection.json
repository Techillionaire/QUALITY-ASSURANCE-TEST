{
	"info": {
		"_postman_id": "1740fd97-ee1f-408c-9995-2d76eeb4e257",
		"name": "BREACH API TESTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17020465",
		"_collection_link": "https://winter-water-258108.postman.co/workspace/New-Team-Workspace~2bdce9e8-00f7-4df9-bbeb-93f2689a8a97/collection/17020465-1740fd97-ee1f-408c-9995-2d76eeb4e257?action=share&source=collection_link&creator=17020465"
	},
	"item": [
		{
			"name": "user registration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // generate random email\r",
							"// let randomEmail = `testuser_${Math.floor(Math.random()*100000)}@mail.com`;\r",
							"// // set a test password\r",
							"// let testPassword = \"Pass12345!\";\r",
							"\r",
							"// // save them to environment variables\r",
							"// pm.environment.set(\"testEmail\", randomEmail);\r",
							"// pm.environment.set(\"testPassword\", testPassword);\r",
							"\r",
							"// // Optionally, log the generated values to confirm they are being set\r",
							"// console.log(\"Generated Email:\", randomEmail);\r",
							"// console.log(\"Generated Password:\", testPassword);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response email matches request\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    if(jsonData.data) {\r",
							"        pm.expect(jsonData.data.email).to.eql(pm.variables.get(\"testEmail\"));\r",
							"    } else {\r",
							"        pm.expect(jsonData).to.not.have.property(\"data\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Duplicate registration returns error\", () => {\r",
							"    pm.response.to.have.status(409);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Missing fields return 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"onyeka@gmail.com\",\r\n    \"password\": \"testpassword12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://breach-api.qa.mvm-tech.xyz/api/auth/register",
					"protocol": "https",
					"host": [
						"breach-api",
						"qa",
						"mvm-tech",
						"xyz"
					],
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "user login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login successful\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.have.property(\"token\");\r",
							"    pm.environment.set(\"authToken\", res.token);\r",
							"});\r",
							"\r",
							"// Invalid login tests\r",
							"pm.test(\"Login with incorrect password should fail\", () => {\r",
							"    pm.response.to.have.status(400); // Or the appropriate status code\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.have.property(\"message\").that.equals(\"Invalid credentials\");\r",
							"});\r",
							"\r",
							"// Response time test\r",
							"pm.test(\"Response time is less than 2 seconds\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Check if the response is in JSON format\r",
							"pm.test(\"Response is in JSON format\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"kingonyeka@gmail.com\",\r\n    \"password\": \"testpassword12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://breach-api.qa.mvm-tech.xyz/api/auth/login",
					"protocol": "https",
					"host": [
						"breach-api",
						"qa",
						"mvm-tech",
						"xyz"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blogs posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each blog post has required properties\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((blog) => {\r",
							"        pm.expect(blog).to.have.property(\"id\");\r",
							"        pm.expect(blog).to.have.property(\"title\");\r",
							"        pm.expect(blog).to.have.property(\"content\");\r",
							"        pm.expect(blog).to.have.property(\"imageUrl\");\r",
							"        pm.expect(blog).to.have.property(\"createdAt\");\r",
							"        pm.expect(blog).to.have.property(\"author\");\r",
							"        pm.expect(blog).to.have.property(\"category\");\r",
							"        pm.expect(blog).to.have.property(\"series\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Blogs are not empty\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://breach-api.qa.mvm-tech.xyz/api/blog/posts",
					"protocol": "https",
					"host": [
						"breach-api",
						"qa",
						"mvm-tech",
						"xyz"
					],
					"path": [
						"api",
						"blog",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blog categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains categories\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not empty\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each category should have id and name\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(category => {\r",
							"        pm.expect(category).to.have.property(\"id\");\r",
							"        pm.expect(category).to.have.property(\"name\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://breach-api.qa.mvm-tech.xyz/api/blog/categories",
					"protocol": "https",
					"host": [
						"breach-api",
						"qa",
						"mvm-tech",
						"xyz"
					],
					"path": [
						"api",
						"blog",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "save user's interests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// âœ… Test 1: Status code should be 200 or 201\r",
							"pm.test(\"Status code is 200 or 201\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Test for empty categoryIds array handling\r",
							"pm.test(\"Handle empty categoryIds array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.error) {\r",
							"        pm.expect(jsonData.error).to.equal(\"Category IDs cannot be empty\");\r",
							"    } else {\r",
							"        pm.expect(jsonData.categoryIds).to.be.an('array').that.is.not.empty;\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test for error handling with invalid category ID\r",
							"pm.test(\"Handle invalid category ID\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.include(\"Invalid category ID\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Nzg4LCJlbWFpbCI6Imtpbmdvbnlla2FAZ21haWwuY29tIiwiaWF0IjoxNzQ2NDE1NTU4LCJleHAiOjE3NDY1MDE5NTh9.8m4e_X_FLXfinIW8OXZYIilKW2bI6dl9mycc7tqkmx8",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"interests\": [\r\n    3\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://breach-api.qa.mvm-tech.xyz/api/users/210/interests",
					"protocol": "https",
					"host": [
						"breach-api",
						"qa",
						"mvm-tech",
						"xyz"
					],
					"path": [
						"api",
						"users",
						"210",
						"interests"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user's interests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is in JSON format\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an array\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Interests array is not empty\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each interest has id and name\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(interest => {\r",
							"        pm.expect(interest).to.have.property(\"id\");\r",
							"        pm.expect(interest).to.have.property(\"category\");\r",
							"        pm.expect(interest).to.have.property(\"user\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Nzg4LCJlbWFpbCI6Imtpbmdvbnlla2FAZ21haWwuY29tIiwiaWF0IjoxNzQ2NDE1NTU4LCJleHAiOjE3NDY1MDE5NTh9.8m4e_X_FLXfinIW8OXZYIilKW2bI6dl9mycc7tqkmx8",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://breach-api.qa.mvm-tech.xyz/api/users/788/interests",
					"protocol": "https",
					"host": [
						"breach-api",
						"qa",
						"mvm-tech",
						"xyz"
					],
					"path": [
						"api",
						"users",
						"788",
						"interests"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl ",
			"value": "https://breach-api.qa.mvm-tech.xyz/",
			"type": "string"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "testPassword ",
			"value": "",
			"type": "string"
		},
		{
			"key": "authToken ",
			"value": "",
			"type": "string"
		}
	]
}